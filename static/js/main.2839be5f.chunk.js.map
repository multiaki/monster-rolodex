{"version":3,"sources":["components/card/card.components.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","key","Search","placeholder","onChange","onKeyUp","App","monsterFilter","searchText","setState","target","value","state","firstName","lastName","this","fetchUsers","fetch","then","response","json","users","filter","toLowerCase","includes","getMonsters","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2UAGaA,G,kBAAO,SAACC,GAAD,OAClB,yBAAKC,UAAU,kBACb,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAKL,EAAMG,QAAQG,OAClF,4BAAKN,EAAMG,QAAQG,MACnB,2BAAIN,EAAMG,QAAQI,UCFTC,EAAW,SAAAR,GACtB,OAAO,yBAAKC,UAAU,aACnBD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACzB,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,SCLzBS,G,MAAS,SAACZ,GACrB,OACE,yBAAKC,UAAU,oBACb,2BAAOY,YAAab,EAAMa,YAAaC,SAAUd,EAAMe,aC4C9CC,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAUFC,cAAgB,SAACC,GACf,EAAKC,SAAS,CAACD,WAAYA,EAAWE,OAAOC,SAV7C,EAAKC,MAAQ,CACXC,UAAW,MACXC,SAAU,WACVf,SAAU,GACVS,WAAW,GACXL,YAAa,+BAPH,E,gEAgBZY,KAAKC,e,mCAIO,IAAD,OACXC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACV,SAAUsB,S,oCAI3B,IAAD,OACZ,OAAON,KAAKH,MAAMb,SAASuB,QAAO,SAAA7B,GAAO,OAAIA,EAAQG,KAAK2B,cAAcC,SAAS,EAAKZ,MAAMJ,WAAWe,oB,+BAIvG,IAAIxB,EAAWgB,KAAKU,cACpB,OACE,yBAAKlC,UAAU,OACb,+CACA,kBAAC,EAAD,CAAQY,YAAaY,KAAKH,MAAMT,YAAaE,QAASU,KAAKR,gBAC3D,kBAAC,EAAD,CAAUR,SAAUA,S,GAtCV2B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2839be5f.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.styles.css'\n\nexport const Card = (props) => (\n  <div className='card-container'>\n    <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt={props.monster.name}/>\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n)\n","import React from \"react\";\nimport './card-list.styles.css'\n\nimport {Card} from '../card/card.components'\n\nexport const CardList = props => {\n  return <div className='card-list'>\n    {props.monsters.map(monster => (\n      <Card key={monster.id} monster={monster} />\n    ))}\n  </div>\n}\n","import React, {Component} from \"react\";\nimport './search.styles.css'\n\nexport const Search = (props) => {\n  return (\n    <div className='search-container'>\n      <input placeholder={props.placeholder} onChange={props.onKeyUp}/>\n    </div>\n  )\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {Search} from \"./components/search/search.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      firstName: 'Aki',\n      lastName: \"Sharipov\",\n      monsters: [],\n      searchText:\"\",\n      placeholder: \"Please search for a monster\"\n    }\n  }\n  \n  monsterFilter = (searchText) => {\n    this.setState({searchText: searchText.target.value})\n  }\n  \n  componentDidMount() {\n    this.fetchUsers()\n  }\n\n  \n  fetchUsers() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n\n  getMonsters() {\n    return this.state.monsters.filter(monster => monster.name.toLowerCase().includes(this.state.searchText.toLowerCase()) )\n  }\n  \n  render() {\n    let monsters = this.getMonsters();\n    return (\n      <div className='App'>\n        <h1>Monster Rolodex</h1>\n        <Search placeholder={this.state.placeholder} onKeyUp={this.monsterFilter}/>\n        <CardList monsters={monsters}/>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}